// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  username    String       @unique
  email       String       @unique
  role        UserRole
  password    String
  status      UserStatus   @default(ACTIVE)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  UserProfile UserProfile?

  @@map("users")
}

model UserProfile {
  id         String   @id @default(uuid())
  userId     String   @unique
  name       String?
  image      String?
  bio        String?
  profession String?
  address    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("user_profiles")
}

model Dictionary {
  id            String   @id @default(uuid())
  word          String   @unique
  definition    String
  pronunciation String
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("dictionary")
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  book      Book[]
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model Book {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  cover       String
  content     String   @db.LongText
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  featured    Boolean  @default(true)
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("books")
}

model Blog {
  id          String   @id @default(uuid())
  slug        String   @unique
  thumbnail   String?
  title       String
  summary     String?
  content     String   @db.LongText
  isPublished Boolean  @default(false)
  IsFeatured  Boolean  @default(true)
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("blogs")
}

model Dua {
  id              String   @id @default(uuid())
  name            String
  arabic          String
  transliteration String?
  bangla          String
  english         String?
  reference       String?
  tags            String?
  isDeleted       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("duas")
}

model Surah {
  id         String   @id @default(uuid())
  chapter    Int      @unique
  totalAyah  Int
  arabic     String
  english    String
  bangla     String?
  history    String?
  revelation String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  ayah       Ayah[]

  @@map("surahs")
}

model Para {
  id           String   @id @default(uuid())
  number       Int      @unique
  arabic       String
  english      String?
  bangla       String?
  startAyahRef String
  endAyahRef   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  ayah         Ayah[]

  @@map("paras")
}

model Ayah {
  id              String   @id @default(uuid())
  surahId         String
  surah           Surah    @relation(fields: [surahId], references: [id])
  paraId          String
  para            Para     @relation(fields: [paraId], references: [id])
  number          Int
  arabic          String
  transliteration String?
  bangla          String?
  english         String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  tafsir          Tafsir?

  @@unique([surahId, paraId, number])
  @@map("ayahs")
}

model Tafsir {
  id        String   @id @default(uuid())
  ayahId    String   @unique
  ayah      Ayah     @relation(fields: [ayahId], references: [id])
  heading   String?
  summaryBn String?
  summaryEn String?
  detailBn  String?
  detailEn  String?
  scholar   String?
  reference String?
  tags      String?
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tafsirs")
}

enum Status {
  PENDING
  BOOKED
  REJECTED
}

enum UserRole {
  SUPERADMIN
  ADMIN
  MODERATOR
  USER
}

enum UserStatus {
  ACTIVE
  BLOCKED
}
