// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  username    String       @unique
  email       String       @unique
  role        UserRole
  password    String
  status      UserStatus   @default(ACTIVE)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  UserProfile UserProfile?

  @@map("users")
}

model UserProfile {
  id         String   @id @default(uuid())
  userId     String   @unique
  name       String?
  image      String?
  bio        String?
  profession String?
  address    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("user_profiles")
}

model Dictionary {
  id            String   @id @default(uuid())
  word          String   @unique
  definition    String
  pronunciation String
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("dictionary")
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  book      Book[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model Book {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  cover       String
  content     String
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  featured    Boolean
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("books")
}

model Blog {
  id        String   @id @default(uuid())
  thumbnail String?
  title     String
  content   String
  published Boolean  @default(false)
  features  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("blogs")
}

model Dua {
  id              String   @id @default(uuid())
  name            String
  arabicText      String
  transliteration String?
  translation     String
  reference       String?
  isDeleted       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("duas")
}

enum Status {
  PENDING
  BOOKED
  REJECTED
}

enum UserRole {
  SUPERADMIN
  ADMIN
  USER
}

enum UserStatus {
  ACTIVE
  BLOCKED
}
